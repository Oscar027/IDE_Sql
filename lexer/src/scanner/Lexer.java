/* The following code was generated by JFlex 1.7.0 */

package scanner;
import com.jhonyrg.dev.parser.sym;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer/src/scanner/scanner.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5, 42, 42,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0, 44,  0,  0,  0,  0, 40,  8,  9,  0,  0,  7,  0, 10,  0, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  6,  0, 11,  0,  0, 
     0, 24, 26, 22, 25, 18, 14, 37, 29, 13,  1, 36, 28, 32, 15, 16, 
    33, 39, 23, 21, 17, 27, 30, 38, 19, 34,  1,  0, 41,  0,  0, 31, 
     0, 24, 26, 22, 25, 18, 14, 37, 29, 13,  1, 36, 28, 32, 15, 16, 
    33, 39, 23, 21, 17, 27, 30, 38, 19, 34,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\6\2\1\1\10\2\1\1"+
    "\2\2\1\1\1\13\1\1\3\0\7\2\1\14\3\2"+
    "\1\0\6\2\2\15\4\2\1\0\5\2\1\0\2\2"+
    "\1\0\1\16\3\0\1\16\1\17\1\0\1\20\1\21"+
    "\1\20\1\21\2\2\1\0\2\2\1\0\4\2\2\22"+
    "\1\2\1\0\3\2\1\0\1\2\1\23\4\2\1\0"+
    "\1\2\2\24\1\25\3\2\1\0\1\2\2\26\1\2"+
    "\2\16\1\0\1\27\1\0\1\27\1\2\1\30\1\0"+
    "\1\2\2\0\1\31\2\0\1\32\1\2\1\33\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\34\1\2\1\0"+
    "\2\2\1\0\3\2\1\0\4\2\1\0\2\2\2\0"+
    "\1\2\2\35\4\0\1\36\1\0\1\2\2\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\3\2\1\0\4\2"+
    "\1\0\1\2\1\37\1\0\2\40\4\0\2\41\2\0"+
    "\1\42\1\0\2\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\43\1\2\2\44\1\45\1\2\2\46\1\0"+
    "\1\2\7\0\2\47\1\2\2\50\1\0\1\2\2\51"+
    "\1\0\1\2\1\0\1\52\1\0\1\2\2\0\1\53"+
    "\2\0\1\54\1\0\1\2\1\0\1\2\2\55\3\0"+
    "\1\56\1\57\1\60\1\0\1\2\1\0\1\2\4\0"+
    "\2\61\1\0\1\2\1\62\2\0\1\63\1\0\1\2"+
    "\1\64\1\65\1\0\1\2\1\0\1\2\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\341\0\u010e\0\u013b\0\u0168\0\u0195"+
    "\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd"+
    "\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\55"+
    "\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u0627\0\132\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\55\0\132"+
    "\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951"+
    "\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0438\0\u0a5f\0\u0a8c"+
    "\0\u0465\0\u0ab9\0\u0ae6\0\u0492\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\132\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\55\0\132\0\132\0\u1059\0\u1086"+
    "\0\u10b3\0\u10e0\0\u110d\0\55\0\132\0\u113a\0\u0a8c\0\u0ab9"+
    "\0\u1167\0\55\0\u1194\0\132\0\u11c1\0\132\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\132\0\u12a2\0\u12cf\0\132\0\u12fc\0\132"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\132\0\u1437"+
    "\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707"+
    "\0\u1734\0\u1761\0\55\0\132\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\132\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950"+
    "\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8"+
    "\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\132"+
    "\0\u1c20\0\55\0\132\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\55"+
    "\0\132\0\u1d01\0\u1d2e\0\132\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\132\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\132\0\u1f77\0\55\0\132\0\u1fa4\0\u1fd1\0\u1ffe"+
    "\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\55\0\132"+
    "\0\u2139\0\55\0\132\0\u2166\0\u2193\0\55\0\132\0\u21c0"+
    "\0\u21ed\0\u221a\0\132\0\u2247\0\u2274\0\u22a1\0\u22ce\0\55"+
    "\0\u22fb\0\u2328\0\55\0\u2355\0\u2382\0\u23af\0\u23dc\0\55"+
    "\0\132\0\u2409\0\u2436\0\u2463\0\55\0\55\0\55\0\u2490"+
    "\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\55"+
    "\0\132\0\u25f8\0\u2625\0\55\0\u2652\0\u267f\0\55\0\u26ac"+
    "\0\u26d9\0\55\0\55\0\u2706\0\u2733\0\u2760\0\u278d\0\55"+
    "\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\3\1\31\2\3\1\32\2\3\1\33\1\3\1\34"+
    "\1\35\1\3\1\36\1\3\1\37\1\2\1\40\1\0"+
    "\1\41\56\0\2\3\12\0\7\3\1\0\16\3\1\0"+
    "\4\3\6\0\1\3\1\4\7\0\1\42\2\0\7\3"+
    "\1\0\16\3\1\0\4\3\10\0\3\5\65\0\1\43"+
    "\1\44\36\0\2\3\12\0\1\3\1\45\1\46\4\3"+
    "\1\0\16\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\47\1\50\12\3\1\0\4\3\6\0"+
    "\2\3\12\0\3\3\1\51\3\3\1\0\6\3\1\52"+
    "\7\3\1\0\4\3\6\0\2\3\12\0\2\3\1\53"+
    "\4\3\1\0\2\3\1\54\13\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\55\1\56\12\3"+
    "\1\0\4\3\6\0\2\3\12\0\2\3\1\57\4\3"+
    "\1\0\16\3\1\0\4\3\27\0\1\60\33\0\2\3"+
    "\12\0\5\3\1\61\1\3\1\0\16\3\1\0\4\3"+
    "\6\0\2\3\12\0\7\3\1\0\2\3\1\62\1\63"+
    "\4\3\1\64\5\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\65\1\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\2\3\1\66\4\3\1\67\1\70\5\3"+
    "\1\71\7\3\1\0\4\3\6\0\2\3\12\0\5\3"+
    "\1\72\1\3\1\0\3\3\1\73\12\3\1\0\4\3"+
    "\6\0\2\3\12\0\2\3\1\74\4\3\1\75\1\76"+
    "\3\3\1\77\7\3\1\100\1\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\101\12\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\2\3\1\102"+
    "\13\3\1\0\4\3\27\0\1\103\33\0\2\3\12\0"+
    "\5\3\1\104\1\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\10\3\1\105\5\3\1\0"+
    "\4\3\5\0\5\106\1\0\42\106\1\107\1\110\3\106"+
    "\5\111\1\0\43\111\1\112\2\111\1\113\2\0\1\114"+
    "\56\0\1\115\71\0\1\116\2\0\2\117\30\0\2\3"+
    "\1\0\1\115\10\0\7\3\1\0\16\3\1\0\4\3"+
    "\6\0\2\3\12\0\4\3\1\120\2\3\1\117\1\121"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\3\3\1\122"+
    "\3\3\1\0\16\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\7\3\1\123\6\3\1\0\4\3\6\0"+
    "\2\3\1\0\1\124\10\0\4\3\1\125\2\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\7\3\1\126\6\3\1\0\4\3\6\0\2\3\1\0"+
    "\1\127\10\0\7\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\6\3\1\130\7\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\5\3\1\131"+
    "\10\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\6\3\1\132\7\3\1\0\1\3\1\133\2\3\26\0"+
    "\1\134\34\0\2\3\12\0\4\3\1\135\2\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\5\3\1\136"+
    "\1\3\1\0\16\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\137\1\140\15\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\3\3\1\141\12\3\1\0\4\3"+
    "\6\0\2\3\12\0\1\3\1\142\5\3\1\143\1\144"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\4\3\1\145\11\3\1\0\4\3\6\0\2\3\12\0"+
    "\4\3\1\146\2\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\1\3\1\147\5\3\1\150"+
    "\6\3\1\0\4\3\6\0\2\3\12\0\4\3\1\151"+
    "\2\3\1\0\16\3\1\0\4\3\6\0\2\3\11\0"+
    "\1\152\1\153\6\3\1\0\16\3\1\0\4\3\27\0"+
    "\1\154\33\0\2\3\12\0\5\3\1\155\1\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\14\3\1\156\1\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\4\3\1\157\11\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\160\4\3\1\161"+
    "\6\3\1\0\4\3\6\0\2\3\11\0\1\162\1\163"+
    "\6\3\1\0\16\3\1\0\4\3\47\0\1\164\13\0"+
    "\2\3\12\0\7\3\1\0\15\3\1\165\1\0\4\3"+
    "\6\0\2\3\12\0\5\3\1\166\1\3\1\0\16\3"+
    "\1\0\4\3\55\0\1\106\4\0\5\106\1\0\42\106"+
    "\1\167\1\110\3\106\5\111\1\0\43\111\1\112\2\111"+
    "\1\170\54\0\1\111\17\0\1\171\55\0\1\172\56\0"+
    "\1\173\33\0\2\3\12\0\3\3\1\174\3\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\5\3\1\175"+
    "\1\3\1\0\16\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\13\3\1\176\2\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\177\1\200\15\3\1\0\4\3"+
    "\35\0\1\201\25\0\2\3\1\0\1\202\10\0\7\3"+
    "\1\0\16\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\7\3\1\203\6\3\1\0\4\3\36\0\1\204"+
    "\1\0\1\205\22\0\2\3\12\0\5\3\1\206\1\3"+
    "\1\0\16\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\7\3\1\207\6\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\13\3\1\210\2\3\1\0\4\3"+
    "\6\0\2\3\11\0\1\211\1\212\6\3\1\0\16\3"+
    "\1\0\4\3\11\0\1\213\51\0\2\3\1\0\1\213"+
    "\10\0\7\3\1\0\16\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\3\3\1\214\12\3\1\0\4\3"+
    "\33\0\1\215\27\0\2\3\12\0\7\3\1\0\1\3"+
    "\1\216\14\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\217\13\3\1\0\4\3\6\0\2\3"+
    "\12\0\5\3\1\220\1\3\1\0\16\3\1\0\4\3"+
    "\26\0\1\221\34\0\2\3\12\0\4\3\1\222\2\3"+
    "\1\0\16\3\1\0\4\3\6\0\2\3\12\0\3\3"+
    "\1\223\3\3\1\0\16\3\1\0\4\3\6\0\2\3"+
    "\11\0\1\224\1\225\6\3\1\0\16\3\1\0\4\3"+
    "\6\0\2\3\12\0\5\3\1\226\1\3\1\0\16\3"+
    "\1\0\4\3\6\0\2\3\12\0\7\3\1\0\3\3"+
    "\1\227\12\3\1\0\4\3\54\0\1\230\6\0\2\3"+
    "\12\0\7\3\1\0\16\3\1\0\3\3\1\231\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\232\12\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\1\3\1\233"+
    "\14\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\6\3\1\234\7\3\1\0\4\3\45\0\1\235\15\0"+
    "\2\3\12\0\7\3\1\0\13\3\1\236\2\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\2\3\1\237"+
    "\13\3\1\0\4\3\25\0\1\240\63\0\1\241\26\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\242\13\3\1\0"+
    "\4\3\27\0\1\243\33\0\2\3\12\0\5\3\1\244"+
    "\1\3\1\0\16\3\1\0\4\3\33\0\1\245\45\0"+
    "\1\246\57\0\1\247\73\0\1\250\14\0\2\3\12\0"+
    "\5\3\1\251\1\3\1\0\16\3\1\0\4\3\24\0"+
    "\1\252\36\0\2\3\12\0\2\3\1\253\4\3\1\0"+
    "\16\3\1\0\4\3\24\0\1\254\11\0\1\255\24\0"+
    "\2\3\12\0\4\3\1\256\2\3\1\0\16\3\1\0"+
    "\4\3\35\0\1\257\25\0\2\3\12\0\7\3\1\0"+
    "\3\3\1\260\12\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\2\3\1\261\13\3\1\0\4\3\34\0"+
    "\1\262\26\0\2\3\12\0\7\3\1\0\2\3\1\263"+
    "\13\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\12\3\1\264\3\3\1\0\4\3\45\0\1\265\15\0"+
    "\2\3\12\0\7\3\1\0\13\3\1\266\2\3\1\0"+
    "\4\3\6\0\2\3\12\0\4\3\1\267\2\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\5\3\1\270\10\3\1\0\4\3\40\0\1\271\22\0"+
    "\2\3\12\0\7\3\1\0\6\3\1\272\7\3\1\0"+
    "\4\3\6\0\2\3\12\0\4\3\1\273\2\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\10\3\1\274\5\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\275\1\3\1\0\16\3\1\0\4\3\35\0"+
    "\1\276\25\0\2\3\12\0\7\3\1\0\3\3\1\277"+
    "\12\3\1\0\4\3\6\0\2\3\12\0\5\3\1\300"+
    "\1\3\1\0\16\3\1\0\4\3\26\0\1\301\54\0"+
    "\1\302\34\0\2\3\12\0\4\3\1\303\2\3\1\0"+
    "\16\3\1\0\4\3\26\0\1\304\66\0\1\305\55\0"+
    "\1\306\51\0\1\307\45\0\1\310\33\0\2\3\12\0"+
    "\5\3\1\311\1\3\1\0\16\3\1\0\4\3\40\0"+
    "\1\312\43\0\1\313\33\0\2\3\12\0\5\3\1\314"+
    "\1\3\1\0\16\3\1\0\4\3\36\0\1\315\24\0"+
    "\2\3\12\0\7\3\1\0\4\3\1\316\11\3\1\0"+
    "\4\3\6\0\2\3\12\0\5\3\1\317\1\3\1\0"+
    "\16\3\1\0\4\3\21\0\2\320\40\0\2\3\11\0"+
    "\1\320\1\321\6\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\11\0\1\322\1\323\6\3\1\0\16\3\1\0"+
    "\4\3\35\0\1\324\25\0\2\3\12\0\7\3\1\0"+
    "\3\3\1\325\12\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\326\1\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\327\12\3\1\0"+
    "\4\3\27\0\1\330\33\0\2\3\12\0\5\3\1\331"+
    "\1\3\1\0\16\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\332\1\3\1\0\16\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\333\12\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\334\1\335\15\3"+
    "\1\0\4\3\34\0\1\336\26\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\337\13\3\1\0\4\3\11\0\1\340"+
    "\64\0\2\341\73\0\1\342\42\0\1\343\62\0\1\344"+
    "\60\0\1\345\36\0\1\346\60\0\1\347\33\0\2\3"+
    "\12\0\5\3\1\350\1\3\1\0\16\3\1\0\4\3"+
    "\6\0\2\3\12\0\2\3\1\351\4\3\1\0\16\3"+
    "\1\0\4\3\33\0\1\352\27\0\2\3\12\0\7\3"+
    "\1\0\1\3\1\353\14\3\1\0\4\3\24\0\1\354"+
    "\36\0\2\3\12\0\2\3\1\355\4\3\1\0\16\3"+
    "\1\0\4\3\41\0\1\356\21\0\2\3\12\0\7\3"+
    "\1\0\7\3\1\357\6\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\360\1\361\15\3\1\0\4\3\11\0"+
    "\1\362\51\0\2\3\1\0\1\362\10\0\7\3\1\0"+
    "\16\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\2\3\1\363\13\3\1\0\4\3\47\0\1\364\13\0"+
    "\2\3\12\0\7\3\1\0\15\3\1\365\1\0\4\3"+
    "\27\0\1\366\52\0\1\367\70\0\1\370\41\0\1\371"+
    "\54\0\1\372\67\0\1\373\50\0\1\374\25\0\2\3"+
    "\12\0\7\3\1\0\1\3\1\375\14\3\1\0\4\3"+
    "\33\0\1\376\27\0\2\3\12\0\7\3\1\0\1\3"+
    "\1\377\14\3\1\0\4\3\27\0\1\u0100\33\0\2\3"+
    "\12\0\5\3\1\u0101\1\3\1\0\16\3\1\0\4\3"+
    "\50\0\2\u0102\14\0\1\u0103\51\0\2\3\1\0\1\u0103"+
    "\10\0\7\3\1\0\16\3\1\0\4\3\30\0\1\u0104"+
    "\50\0\1\u0105\57\0\1\u0106\54\0\1\u0107\65\0\1\u0108"+
    "\22\0\2\3\12\0\5\3\1\u0109\1\3\1\0\16\3"+
    "\1\0\4\3\34\0\1\u010a\26\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\u010b\13\3\1\0\4\3\27\0\1\u010c"+
    "\75\0\2\u010d\24\0\2\u010e\73\0\1\u010f\21\0\2\3"+
    "\12\0\7\3\1\u0110\1\u0111\15\3\1\0\4\3\27\0"+
    "\1\u0112\33\0\2\3\12\0\5\3\1\u0113\1\3\1\0"+
    "\16\3\1\0\4\3\47\0\1\u0114\34\0\1\u0115\56\0"+
    "\2\u0116\50\0\1\u0117\73\0\1\u0118\15\0\2\3\12\0"+
    "\7\3\1\0\13\3\1\u0119\2\3\1\0\4\3\47\0"+
    "\1\u011a\33\0\1\u011b\55\0\1\u011c\33\0\2\3\12\0"+
    "\5\3\1\u011d\1\3\1\0\16\3\1\0\4\3\24\0"+
    "\1\u011e\36\0\2\3\12\0\2\3\1\u011f\4\3\1\0"+
    "\16\3\1\0\4\3\26\0\1\u0120\34\0\2\3\12\0"+
    "\4\3\1\u0121\2\3\1\0\16\3\1\0\4\3\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\6\11\24\1\1\11\1\1\3\0"+
    "\13\1\1\0\6\1\1\11\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\3\0\2\1\1\0\6\1\1\0"+
    "\2\1\1\0\7\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\1\11\5\1\1\0\1\1\1\11\4\1\1\0"+
    "\1\11\1\0\3\1\1\0\1\1\2\0\1\1\2\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\3\1\1\0\4\1\1\0\2\1\2\0"+
    "\1\1\1\11\1\1\4\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\11\1\1\4\0\1\11"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\7\1\1\11\1\1\1\0\1\1\7\0"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\3\0\3\11\1\0\1\1\1\0\1\1\4\0\1\11"+
    "\1\1\1\0\1\1\1\11\2\0\1\11\1\0\1\1"+
    "\2\11\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Logger log = Logger.getLogger(getClass().getName());
  private LexerCallback listener;

  /**Metodo para retornar el objeto Symbol con la información del token*/
  private Symbol token( int tokenType, int token ) {
      //log.log(Level.INFO, "Obtain token " + tokenType + " \"" + yytext() + "\"" );
      TokenData tokenData = new TokenData(tokenType, token, yyline+1, yycolumn+1, yycolumn+yylength(),
              yycharat(yycolumn), yytext());

      //Enviando el token a travez del listener
      this.listener.onTokenFound(tokenData);

      //return new Symbol( tokenType, new TokenData(yyline+1, yycolumn+1, yycolumn+yylength(), yytext()));
      return new Symbol(token, tokenData);
  }

  /**Metodo para setear el listener*/
  public void setCallback(LexerCallback listener) {
    this.listener = listener;
  }
  /* :end user code */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.error, sym.error);
            } 
            // fall through
          case 55: break;
          case 2: 
            { return token(sym.IDENTIFIER, sym.IDENTIFIER);
            } 
            // fall through
          case 56: break;
          case 3: 
            { return token(sym.NUMBER, sym.NUMBER_INT);
            } 
            // fall through
          case 57: break;
          case 4: 
            { ;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return token(sym.SYMBOL, sym.SEMI);
            } 
            // fall through
          case 59: break;
          case 6: 
            { return token(sym.SYMBOL, sym.COMMA);
            } 
            // fall through
          case 60: break;
          case 7: 
            { return token(sym.SYMBOL, sym.LPAREN);
            } 
            // fall through
          case 61: break;
          case 8: 
            { return token(sym.SYMBOL, sym.RPAREN);
            } 
            // fall through
          case 62: break;
          case 9: 
            { return token(sym.SYMBOL, sym.POINT);
            } 
            // fall through
          case 63: break;
          case 10: 
            { return token(sym.SYMBOL, sym.EQUAL);
            } 
            // fall through
          case 64: break;
          case 11: 
            { throw new Error("Illegal character <"+yytext()+">");
            } 
            // fall through
          case 65: break;
          case 12: 
            { return token(sym.KEYWORD, sym.OR);
            } 
            // fall through
          case 66: break;
          case 13: 
            { return token(sym.KEYWORD, sym.AS);
            } 
            // fall through
          case 67: break;
          case 14: 
            { return token(sym.STRING, sym.STRING);
            } 
            // fall through
          case 68: break;
          case 15: 
            { return token(sym.NUMBER, sym.NUMBER_DEC);
            } 
            // fall through
          case 69: break;
          case 16: 
            { return token(sym.KEYWORD, sym.INTEGER);
            } 
            // fall through
          case 70: break;
          case 17: 
            { return token(sym.KEYWORD, sym.INS);
            } 
            // fall through
          case 71: break;
          case 18: 
            { return token(sym.KEYWORD, sym.SET);
            } 
            // fall through
          case 72: break;
          case 19: 
            { return token(sym.KEYWORD, sym.AND);
            } 
            // fall through
          case 73: break;
          case 20: 
            { return token(sym.KEYWORD, sym.USE);
            } 
            // fall through
          case 74: break;
          case 21: 
            { return token(sym.KEYWORD, sym.UDP);
            } 
            // fall through
          case 75: break;
          case 22: 
            { return token(sym.KEYWORD, sym.KEY);
            } 
            // fall through
          case 76: break;
          case 23: 
            { return token(sym.KEYWORD, sym.INTO);
            } 
            // fall through
          case 77: break;
          case 24: 
            { return token(sym.KEYWORD, sym.FROM);
            } 
            // fall through
          case 78: break;
          case 25: 
            { return token(sym.KEYWORD, sym.NULL);
            } 
            // fall through
          case 79: break;
          case 26: 
            { return token(sym.KEYWORD, sym.TRUE);
            } 
            // fall through
          case 80: break;
          case 27: 
            { return token(sym.KEYWORD, sym.ENUM);
            } 
            // fall through
          case 81: break;
          case 28: 
            { return token(sym.KEYWORD, sym.CHAR);
            } 
            // fall through
          case 82: break;
          case 29: 
            { return token(sym.KEYWORD, sym.FALSE);
            } 
            // fall through
          case 83: break;
          case 30: 
            { return token(sym.KEYWORD, sym.TABLE);
            } 
            // fall through
          case 84: break;
          case 31: 
            { return token(sym.KEYWORD, sym.WHERE);
            } 
            // fall through
          case 85: break;
          case 32: 
            { return token(sym.KEYWORD, sym.INSERT);
            } 
            // fall through
          case 86: break;
          case 33: 
            { return token(sym.KEYWORD, sym.ENGINE);
            } 
            // fall through
          case 87: break;
          case 34: 
            { return token(sym.KEYWORD, sym.CREATE);
            } 
            // fall through
          case 88: break;
          case 35: 
            { return token(sym.KEYWORD, sym.DELETE);
            } 
            // fall through
          case 89: break;
          case 36: 
            { return token(sym.KEYWORD, sym.UNIQUE);
            } 
            // fall through
          case 90: break;
          case 37: 
            { return token(sym.KEYWORD, sym.UPDATE);
            } 
            // fall through
          case 91: break;
          case 38: 
            { return token(sym.KEYWORD, sym.VALUES);
            } 
            // fall through
          case 92: break;
          case 39: 
            { return token(sym.KEYWORD, sym.CASCADE);
            } 
            // fall through
          case 93: break;
          case 40: 
            { return token(sym.KEYWORD, sym.RESTRIC);
            } 
            // fall through
          case 94: break;
          case 41: 
            { return token(sym.KEYWORD, sym.DECIMAL);
            } 
            // fall through
          case 95: break;
          case 42: 
            { return token(sym.KEYWORD, sym.VARCHAR);
            } 
            // fall through
          case 96: break;
          case 43: 
            { return token(sym.KEYWORD, sym.NOT_NULL);
            } 
            // fall through
          case 97: break;
          case 44: 
            { return token(sym.KEYWORD, sym.SET_NULL);
            } 
            // fall through
          case 98: break;
          case 45: 
            { return token(sym.KEYWORD, sym.DATABASE);
            } 
            // fall through
          case 99: break;
          case 46: 
            { return token(sym.KEYWORD, sym.NO_ACTION);
            } 
            // fall through
          case 100: break;
          case 47: 
            { return token(sym.KEYWORD, sym.ON_DELETE);
            } 
            // fall through
          case 101: break;
          case 48: 
            { return token(sym.KEYWORD, sym.ON_UPDATE);
            } 
            // fall through
          case 102: break;
          case 49: 
            { return token(sym.KEYWORD, sym.REFERENCES);
            } 
            // fall through
          case 103: break;
          case 50: 
            { return token(sym.KEYWORD, sym.UNIQUE_KEY);
            } 
            // fall through
          case 104: break;
          case 51: 
            { return token(sym.KEYWORD, sym.SET_DEFAULT);
            } 
            // fall through
          case 105: break;
          case 52: 
            { return token(sym.KEYWORD, sym.PRIMARY_KEY);
            } 
            // fall through
          case 106: break;
          case 53: 
            { return token(sym.KEYWORD, sym.IF_NOT_EXIST);
            } 
            // fall through
          case 107: break;
          case 54: 
            { return token(sym.KEYWORD, sym.AUTO_INCREMENT);
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
