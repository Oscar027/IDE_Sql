/* The following code was generated by JFlex 1.7.0 */

package scanner;
import com.jhonyrg.dev.parser.sym;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5, 41, 41,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0, 43,  0,  0,  0,  0, 39,  8,  9,  0,  0,  7,  0, 10,  0, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  6,  0, 11,  0,  0, 
     0, 24, 26, 22, 25, 18, 14, 36, 29, 13,  1, 35, 28, 31, 15, 16, 
    32, 38, 23, 21, 17, 27, 30, 37, 19, 33,  1,  0, 40,  0,  0,  1, 
     0, 24, 26, 22, 25, 18, 14, 36, 29, 13,  1, 35, 28, 31, 15, 16, 
    32, 38, 23, 21, 17, 27, 30, 37, 19, 33,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\6\2\1\1\10\2\1\1"+
    "\2\2\1\1\1\13\1\1\3\0\7\2\1\14\3\2"+
    "\1\0\6\2\2\15\4\2\1\0\5\2\1\0\2\2"+
    "\1\0\1\16\3\0\1\16\1\17\1\0\1\20\1\21"+
    "\1\20\1\21\2\2\1\0\2\2\1\0\4\2\2\22"+
    "\1\2\1\0\3\2\1\0\1\2\1\23\4\2\1\0"+
    "\1\2\2\24\1\25\3\2\1\0\1\2\2\26\1\2"+
    "\2\16\1\0\1\27\1\0\1\27\1\2\1\30\1\0"+
    "\1\2\2\0\1\31\2\0\1\32\1\2\1\33\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\34\1\2\1\0"+
    "\2\2\1\0\3\2\1\0\4\2\1\0\2\2\2\0"+
    "\1\2\2\35\4\0\1\36\1\0\1\2\2\0\1\2"+
    "\1\0\2\2\1\0\1\2\2\0\3\2\1\0\4\2"+
    "\1\0\1\2\1\37\1\0\2\40\4\0\2\41\2\0"+
    "\1\42\1\0\2\2\1\0\1\2\2\0\1\2\1\43"+
    "\1\2\2\44\1\45\1\2\2\46\1\0\1\2\7\0"+
    "\2\47\1\2\2\50\1\0\2\51\1\0\1\2\1\0"+
    "\1\52\1\0\1\2\2\0\1\53\2\0\1\54\1\0"+
    "\1\2\1\0\2\55\3\0\1\56\1\57\1\60\1\0"+
    "\1\2\5\0\2\61\1\0\1\62\2\0\1\63\1\0"+
    "\1\64\1\65\2\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\54\0\54\0\54"+
    "\0\54\0\54\0\54\0\334\0\u0108\0\u0134\0\u0160\0\u018c"+
    "\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec"+
    "\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\54"+
    "\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\130\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\54\0\130"+
    "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0420\0\u0a24\0\u0a50"+
    "\0\u044c\0\u0a7c\0\u0aa8\0\u0478\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\130\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\54\0\130\0\130\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\54\0\130\0\u10d8\0\u0a50\0\u0a7c"+
    "\0\u1104\0\54\0\u1130\0\130\0\u115c\0\130\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\130\0\u1238\0\u1264\0\130\0\u1290\0\130"+
    "\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\130\0\u13c4"+
    "\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524"+
    "\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684"+
    "\0\u16b0\0\u16dc\0\54\0\130\0\u1708\0\u1734\0\u1760\0\u178c"+
    "\0\130\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0"+
    "\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20"+
    "\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\130"+
    "\0\u1b80\0\54\0\130\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\54"+
    "\0\130\0\u1c5c\0\u1c88\0\130\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\130\0\u1e14\0\u1e40\0\u1e6c"+
    "\0\130\0\u1e98\0\54\0\130\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48"+
    "\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\54\0\130\0\u2050"+
    "\0\54\0\130\0\u207c\0\54\0\130\0\u20a8\0\u20d4\0\u2100"+
    "\0\130\0\u212c\0\u2158\0\u2184\0\u21b0\0\54\0\u21dc\0\u2208"+
    "\0\54\0\u2234\0\u2260\0\u228c\0\54\0\130\0\u22b8\0\u22e4"+
    "\0\u2310\0\54\0\54\0\54\0\u233c\0\u2368\0\u2394\0\u23c0"+
    "\0\u23ec\0\u2418\0\u2444\0\54\0\130\0\u2470\0\54\0\u249c"+
    "\0\u24c8\0\54\0\u24f4\0\54\0\54\0\u2520\0\u254c\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\3\1\31\2\3\1\32\1\3\1\33\1\3\1\34"+
    "\1\35\1\3\1\36\1\3\1\37\1\2\1\40\1\0"+
    "\1\41\55\0\2\3\12\0\7\3\1\0\15\3\1\0"+
    "\4\3\6\0\1\3\1\4\7\0\1\42\2\0\7\3"+
    "\1\0\15\3\1\0\4\3\10\0\3\5\64\0\1\43"+
    "\1\44\35\0\2\3\12\0\1\3\1\45\1\46\4\3"+
    "\1\0\15\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\47\1\50\11\3\1\0\4\3\6\0"+
    "\2\3\12\0\3\3\1\51\3\3\1\0\6\3\1\52"+
    "\6\3\1\0\4\3\6\0\2\3\12\0\2\3\1\53"+
    "\4\3\1\0\2\3\1\54\12\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\55\1\56\11\3"+
    "\1\0\4\3\6\0\2\3\12\0\2\3\1\57\4\3"+
    "\1\0\15\3\1\0\4\3\27\0\1\60\32\0\2\3"+
    "\12\0\5\3\1\61\1\3\1\0\15\3\1\0\4\3"+
    "\6\0\2\3\12\0\7\3\1\0\2\3\1\62\1\63"+
    "\4\3\1\64\4\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\65\1\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\2\3\1\66\4\3\1\67\1\70\5\3"+
    "\1\71\6\3\1\0\4\3\6\0\2\3\12\0\5\3"+
    "\1\72\1\3\1\0\3\3\1\73\11\3\1\0\4\3"+
    "\6\0\2\3\12\0\2\3\1\74\4\3\1\75\1\76"+
    "\3\3\1\77\6\3\1\100\1\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\101\11\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\2\3\1\102"+
    "\12\3\1\0\4\3\27\0\1\103\32\0\2\3\12\0"+
    "\5\3\1\104\1\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\10\3\1\105\4\3\1\0"+
    "\4\3\5\0\5\106\1\0\41\106\1\107\1\110\3\106"+
    "\5\111\1\0\42\111\1\112\2\111\1\113\2\0\1\114"+
    "\55\0\1\115\70\0\1\116\2\0\2\117\27\0\2\3"+
    "\1\0\1\115\10\0\7\3\1\0\15\3\1\0\4\3"+
    "\6\0\2\3\12\0\4\3\1\120\2\3\1\117\1\121"+
    "\14\3\1\0\4\3\6\0\2\3\12\0\3\3\1\122"+
    "\3\3\1\0\15\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\7\3\1\123\5\3\1\0\4\3\6\0"+
    "\2\3\1\0\1\124\10\0\4\3\1\125\2\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\7\3\1\126\5\3\1\0\4\3\6\0\2\3\1\0"+
    "\1\127\10\0\7\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\6\3\1\130\6\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\5\3\1\131"+
    "\7\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\6\3\1\132\6\3\1\0\1\3\1\133\2\3\26\0"+
    "\1\134\33\0\2\3\12\0\4\3\1\135\2\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\5\3\1\136"+
    "\1\3\1\0\15\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\137\1\140\14\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\3\3\1\141\11\3\1\0\4\3"+
    "\6\0\2\3\12\0\1\3\1\142\5\3\1\143\1\144"+
    "\14\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\4\3\1\145\10\3\1\0\4\3\6\0\2\3\12\0"+
    "\4\3\1\146\2\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\1\3\1\147\5\3\1\150"+
    "\5\3\1\0\4\3\6\0\2\3\12\0\4\3\1\151"+
    "\2\3\1\0\15\3\1\0\4\3\6\0\2\3\11\0"+
    "\1\152\1\153\6\3\1\0\15\3\1\0\4\3\27\0"+
    "\1\154\32\0\2\3\12\0\5\3\1\155\1\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\13\3\1\156\1\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\4\3\1\157\10\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\160\4\3\1\161"+
    "\5\3\1\0\4\3\6\0\2\3\11\0\1\162\1\163"+
    "\6\3\1\0\15\3\1\0\4\3\46\0\1\164\13\0"+
    "\2\3\12\0\7\3\1\0\14\3\1\165\1\0\4\3"+
    "\6\0\2\3\12\0\5\3\1\166\1\3\1\0\15\3"+
    "\1\0\4\3\54\0\1\106\4\0\5\106\1\0\41\106"+
    "\1\167\1\110\3\106\5\111\1\0\42\111\1\112\2\111"+
    "\1\170\53\0\1\111\17\0\1\171\54\0\1\172\55\0"+
    "\1\173\32\0\2\3\12\0\3\3\1\174\3\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\5\3\1\175"+
    "\1\3\1\0\15\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\12\3\1\176\2\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\177\1\200\14\3\1\0\4\3"+
    "\35\0\1\201\24\0\2\3\1\0\1\202\10\0\7\3"+
    "\1\0\15\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\7\3\1\203\5\3\1\0\4\3\36\0\1\204"+
    "\1\0\1\205\21\0\2\3\12\0\5\3\1\206\1\3"+
    "\1\0\15\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\7\3\1\207\5\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\12\3\1\210\2\3\1\0\4\3"+
    "\6\0\2\3\11\0\1\211\1\212\6\3\1\0\15\3"+
    "\1\0\4\3\11\0\1\213\50\0\2\3\1\0\1\213"+
    "\10\0\7\3\1\0\15\3\1\0\4\3\6\0\2\3"+
    "\12\0\7\3\1\0\3\3\1\214\11\3\1\0\4\3"+
    "\33\0\1\215\26\0\2\3\12\0\7\3\1\0\1\3"+
    "\1\216\13\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\217\12\3\1\0\4\3\6\0\2\3"+
    "\12\0\5\3\1\220\1\3\1\0\15\3\1\0\4\3"+
    "\26\0\1\221\33\0\2\3\12\0\4\3\1\222\2\3"+
    "\1\0\15\3\1\0\4\3\6\0\2\3\12\0\3\3"+
    "\1\223\3\3\1\0\15\3\1\0\4\3\6\0\2\3"+
    "\11\0\1\224\1\225\6\3\1\0\15\3\1\0\4\3"+
    "\6\0\2\3\12\0\5\3\1\226\1\3\1\0\15\3"+
    "\1\0\4\3\6\0\2\3\12\0\7\3\1\0\3\3"+
    "\1\227\11\3\1\0\4\3\53\0\1\230\6\0\2\3"+
    "\12\0\7\3\1\0\15\3\1\0\3\3\1\231\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\232\11\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\1\3\1\233"+
    "\13\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\6\3\1\234\6\3\1\0\4\3\44\0\1\235\15\0"+
    "\2\3\12\0\7\3\1\0\12\3\1\236\2\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\2\3\1\237"+
    "\12\3\1\0\4\3\25\0\1\240\62\0\1\241\25\0"+
    "\2\3\12\0\7\3\1\0\2\3\1\242\12\3\1\0"+
    "\4\3\27\0\1\243\32\0\2\3\12\0\5\3\1\244"+
    "\1\3\1\0\15\3\1\0\4\3\33\0\1\245\44\0"+
    "\1\246\56\0\1\247\71\0\1\250\14\0\2\3\12\0"+
    "\5\3\1\251\1\3\1\0\15\3\1\0\4\3\24\0"+
    "\1\252\35\0\2\3\12\0\2\3\1\253\4\3\1\0"+
    "\15\3\1\0\4\3\24\0\1\254\11\0\1\255\23\0"+
    "\2\3\12\0\4\3\1\256\2\3\1\0\15\3\1\0"+
    "\4\3\35\0\1\257\24\0\2\3\12\0\7\3\1\0"+
    "\3\3\1\260\11\3\1\0\4\3\6\0\2\3\12\0"+
    "\7\3\1\0\2\3\1\261\12\3\1\0\4\3\34\0"+
    "\1\262\25\0\2\3\12\0\7\3\1\0\2\3\1\263"+
    "\12\3\1\0\4\3\6\0\2\3\1\0\1\264\10\0"+
    "\7\3\1\0\15\3\1\0\4\3\44\0\1\265\15\0"+
    "\2\3\12\0\7\3\1\0\12\3\1\266\2\3\1\0"+
    "\4\3\6\0\2\3\12\0\4\3\1\267\2\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\5\3\1\270\7\3\1\0\4\3\40\0\1\271\21\0"+
    "\2\3\12\0\7\3\1\0\6\3\1\272\6\3\1\0"+
    "\4\3\6\0\2\3\12\0\4\3\1\273\2\3\1\0"+
    "\15\3\1\0\4\3\6\0\2\3\12\0\7\3\1\0"+
    "\10\3\1\274\4\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\275\1\3\1\0\15\3\1\0\4\3\35\0"+
    "\1\276\24\0\2\3\12\0\7\3\1\0\3\3\1\277"+
    "\11\3\1\0\4\3\6\0\2\3\12\0\5\3\1\300"+
    "\1\3\1\0\15\3\1\0\4\3\26\0\1\301\53\0"+
    "\1\302\33\0\2\3\12\0\4\3\1\303\2\3\1\0"+
    "\15\3\1\0\4\3\26\0\1\304\65\0\1\305\54\0"+
    "\1\306\50\0\1\307\44\0\1\310\32\0\2\3\12\0"+
    "\5\3\1\311\1\3\1\0\15\3\1\0\4\3\40\0"+
    "\1\312\42\0\1\313\32\0\2\3\12\0\5\3\1\314"+
    "\1\3\1\0\15\3\1\0\4\3\36\0\1\315\23\0"+
    "\2\3\12\0\7\3\1\0\4\3\1\316\10\3\1\0"+
    "\4\3\6\0\2\3\12\0\5\3\1\317\1\3\1\0"+
    "\15\3\1\0\4\3\21\0\2\320\37\0\2\3\11\0"+
    "\1\320\1\321\6\3\1\0\15\3\1\0\4\3\21\0"+
    "\2\322\66\0\1\323\24\0\2\3\12\0\7\3\1\0"+
    "\3\3\1\324\11\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\325\1\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\326\11\3\1\0"+
    "\4\3\27\0\1\327\32\0\2\3\12\0\5\3\1\330"+
    "\1\3\1\0\15\3\1\0\4\3\6\0\2\3\12\0"+
    "\5\3\1\331\1\3\1\0\15\3\1\0\4\3\6\0"+
    "\2\3\12\0\7\3\1\0\3\3\1\332\11\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\333\1\334\14\3"+
    "\1\0\4\3\34\0\1\335\25\0\2\3\12\0\7\3"+
    "\1\0\2\3\1\336\12\3\1\0\4\3\11\0\1\337"+
    "\63\0\2\340\72\0\1\341\41\0\1\342\61\0\1\343"+
    "\57\0\1\344\35\0\1\345\57\0\1\346\32\0\2\3"+
    "\12\0\5\3\1\347\1\3\1\0\15\3\1\0\4\3"+
    "\6\0\2\3\12\0\2\3\1\350\4\3\1\0\15\3"+
    "\1\0\4\3\33\0\1\351\26\0\2\3\12\0\7\3"+
    "\1\0\1\3\1\352\13\3\1\0\4\3\24\0\1\353"+
    "\70\0\1\354\20\0\2\3\12\0\7\3\1\0\7\3"+
    "\1\355\5\3\1\0\4\3\6\0\2\3\12\0\7\3"+
    "\1\356\1\357\14\3\1\0\4\3\11\0\1\360\50\0"+
    "\2\3\1\0\1\360\10\0\7\3\1\0\15\3\1\0"+
    "\4\3\6\0\2\3\12\0\7\3\1\0\2\3\1\361"+
    "\12\3\1\0\4\3\46\0\1\362\13\0\2\3\12\0"+
    "\7\3\1\0\14\3\1\363\1\0\4\3\27\0\1\364"+
    "\51\0\1\365\67\0\1\366\40\0\1\367\53\0\1\370"+
    "\66\0\1\371\47\0\1\372\24\0\2\3\12\0\7\3"+
    "\1\0\1\3\1\373\13\3\1\0\4\3\33\0\1\374"+
    "\47\0\1\375\32\0\2\3\12\0\5\3\1\376\1\3"+
    "\1\0\15\3\1\0\4\3\47\0\2\377\14\0\1\u0100"+
    "\50\0\2\3\1\0\1\u0100\10\0\7\3\1\0\15\3"+
    "\1\0\4\3\30\0\1\u0101\47\0\1\u0102\56\0\1\u0103"+
    "\53\0\1\u0104\64\0\1\u0105\21\0\2\3\12\0\5\3"+
    "\1\u0106\1\3\1\0\15\3\1\0\4\3\34\0\1\u0107"+
    "\46\0\1\u0108\73\0\2\u0109\24\0\2\u010a\72\0\1\u010b"+
    "\20\0\2\3\12\0\7\3\1\u010c\1\u010d\14\3\1\0"+
    "\4\3\27\0\1\u010e\72\0\1\u010f\34\0\1\u0110\55\0"+
    "\2\u0111\47\0\1\u0112\71\0\1\u0113\55\0\1\u0114\33\0"+
    "\1\u0115\54\0\1\u0116\50\0\1\u0117\55\0\1\u0118\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\6\11\24\1\1\11\1\1\3\0"+
    "\13\1\1\0\6\1\1\11\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\3\0\2\1\1\0\6\1\1\0"+
    "\2\1\1\0\7\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\1\11\5\1\1\0\1\1\1\11\4\1\1\0"+
    "\1\11\1\0\3\1\1\0\1\1\2\0\1\1\2\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\3\1\1\0\4\1\1\0\2\1\2\0"+
    "\1\1\1\11\1\1\4\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\2\0\3\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\11\1\1\4\0\1\11"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\1\1\2\0"+
    "\7\1\1\11\1\1\1\0\1\1\7\0\1\11\2\1"+
    "\1\11\1\1\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\11\2\0\1\11\1\0"+
    "\1\1\1\0\1\11\1\1\3\0\3\11\1\0\1\1"+
    "\5\0\1\11\1\1\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack<ZzFlexStreamInfo> zzStreams
    = new java.util.Stack<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer, 
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, int yychar, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
  private Logger log = Logger.getLogger(getClass().getName());
  private LexerCallback listener;

  /**Metodo para retornar el objeto Symbol con la información del token*/
  private Symbol token( int tokenType, int token ) {
      //log.log(Level.INFO, "Obtain token " + tokenType + " \"" + yytext() + "\"" );
      TokenData tokenData = new TokenData(tokenType, token, yyline+1, yycolumn+1, yycolumn+yylength(),
              yycharat(yycolumn), yytext());

      //Enviando el token a travez del listener
      this.listener.onTokenFound(tokenData);

      //return new Symbol( tokenType, new TokenData(yyline+1, yycolumn+1, yycolumn+yylength(), yytext()));
      return new Symbol(token, tokenData);
  }

  /**Metodo para setear el listener*/
  public void setCallback(LexerCallback listener) {
    this.listener = listener;
  }
  /* :end user code */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {      
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.error, sym.error);
            } 
            // fall through
          case 55: break;
          case 2: 
            { return token(sym.IDENTIFIER, sym.IDENTIFIER);
            } 
            // fall through
          case 56: break;
          case 3: 
            { return token(sym.NUMBER, sym.NUMBER_INT);
            } 
            // fall through
          case 57: break;
          case 4: 
            { ;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return token(sym.SYMBOL, sym.SEMI);
            } 
            // fall through
          case 59: break;
          case 6: 
            { return token(sym.SYMBOL, sym.COMMA);
            } 
            // fall through
          case 60: break;
          case 7: 
            { return token(sym.SYMBOL, sym.LPAREN);
            } 
            // fall through
          case 61: break;
          case 8: 
            { return token(sym.SYMBOL, sym.RPAREN);
            } 
            // fall through
          case 62: break;
          case 9: 
            { return token(sym.SYMBOL, sym.POINT);
            } 
            // fall through
          case 63: break;
          case 10: 
            { return token(sym.SYMBOL, sym.EQUAL);
            } 
            // fall through
          case 64: break;
          case 11: 
            { throw new Error("Illegal character <"+yytext()+">");
            } 
            // fall through
          case 65: break;
          case 12: 
            { return token(sym.KEYWORD, sym.OR);
            } 
            // fall through
          case 66: break;
          case 13: 
            { return token(sym.KEYWORD, sym.AS);
            } 
            // fall through
          case 67: break;
          case 14: 
            { return token(sym.STRING, sym.STRING);
            } 
            // fall through
          case 68: break;
          case 15: 
            { return token(sym.NUMBER, sym.NUMBER_DEC);
            } 
            // fall through
          case 69: break;
          case 16: 
            { return token(sym.KEYWORD, sym.INTEGER);
            } 
            // fall through
          case 70: break;
          case 17: 
            { return token(sym.KEYWORD, sym.INS);
            } 
            // fall through
          case 71: break;
          case 18: 
            { return token(sym.KEYWORD, sym.SET);
            } 
            // fall through
          case 72: break;
          case 19: 
            { return token(sym.KEYWORD, sym.AND);
            } 
            // fall through
          case 73: break;
          case 20: 
            { return token(sym.KEYWORD, sym.USE);
            } 
            // fall through
          case 74: break;
          case 21: 
            { return token(sym.KEYWORD, sym.UDP);
            } 
            // fall through
          case 75: break;
          case 22: 
            { return token(sym.KEYWORD, sym.KEY);
            } 
            // fall through
          case 76: break;
          case 23: 
            { return token(sym.KEYWORD, sym.INTO);
            } 
            // fall through
          case 77: break;
          case 24: 
            { return token(sym.KEYWORD, sym.FROM);
            } 
            // fall through
          case 78: break;
          case 25: 
            { return token(sym.KEYWORD, sym.NULL);
            } 
            // fall through
          case 79: break;
          case 26: 
            { return token(sym.KEYWORD, sym.TRUE);
            } 
            // fall through
          case 80: break;
          case 27: 
            { return token(sym.KEYWORD, sym.ENUM);
            } 
            // fall through
          case 81: break;
          case 28: 
            { return token(sym.KEYWORD, sym.CHAR);
            } 
            // fall through
          case 82: break;
          case 29: 
            { return token(sym.KEYWORD, sym.FALSE);
            } 
            // fall through
          case 83: break;
          case 30: 
            { return token(sym.KEYWORD, sym.TABLE);
            } 
            // fall through
          case 84: break;
          case 31: 
            { return token(sym.KEYWORD, sym.WHERE);
            } 
            // fall through
          case 85: break;
          case 32: 
            { return token(sym.KEYWORD, sym.INSERT);
            } 
            // fall through
          case 86: break;
          case 33: 
            { return token(sym.KEYWORD, sym.ENGINE);
            } 
            // fall through
          case 87: break;
          case 34: 
            { return token(sym.KEYWORD, sym.CREATE);
            } 
            // fall through
          case 88: break;
          case 35: 
            { return token(sym.KEYWORD, sym.DELETE);
            } 
            // fall through
          case 89: break;
          case 36: 
            { return token(sym.KEYWORD, sym.UNIQUE);
            } 
            // fall through
          case 90: break;
          case 37: 
            { return token(sym.KEYWORD, sym.UPDATE);
            } 
            // fall through
          case 91: break;
          case 38: 
            { return token(sym.KEYWORD, sym.VALUES);
            } 
            // fall through
          case 92: break;
          case 39: 
            { return token(sym.KEYWORD, sym.CASCADE);
            } 
            // fall through
          case 93: break;
          case 40: 
            { return token(sym.KEYWORD, sym.RESTRIC);
            } 
            // fall through
          case 94: break;
          case 41: 
            { return token(sym.KEYWORD, sym.DECIMAL);
            } 
            // fall through
          case 95: break;
          case 42: 
            { return token(sym.KEYWORD, sym.VARCHAR);
            } 
            // fall through
          case 96: break;
          case 43: 
            { return token(sym.KEYWORD, sym.NOT_NULL);
            } 
            // fall through
          case 97: break;
          case 44: 
            { return token(sym.KEYWORD, sym.SET_NULL);
            } 
            // fall through
          case 98: break;
          case 45: 
            { return token(sym.KEYWORD, sym.DATABASE);
            } 
            // fall through
          case 99: break;
          case 46: 
            { return token(sym.KEYWORD, sym.NO_ACTION);
            } 
            // fall through
          case 100: break;
          case 47: 
            { return token(sym.KEYWORD, sym.ON_DELETE);
            } 
            // fall through
          case 101: break;
          case 48: 
            { return token(sym.KEYWORD, sym.ON_UPDATE);
            } 
            // fall through
          case 102: break;
          case 49: 
            { return token(sym.KEYWORD, sym.REFERENCES);
            } 
            // fall through
          case 103: break;
          case 50: 
            { return token(sym.KEYWORD, sym.UNIQUE_KEY);
            } 
            // fall through
          case 104: break;
          case 51: 
            { return token(sym.KEYWORD, sym.SET_DEFAULT);
            } 
            // fall through
          case 105: break;
          case 52: 
            { return token(sym.KEYWORD, sym.PRIMARY_KEY);
            } 
            // fall through
          case 106: break;
          case 53: 
            { return token(sym.KEYWORD, sym.IF_NOT_EXIST);
            } 
            // fall through
          case 107: break;
          case 54: 
            { return token(sym.KEYWORD, sym.AUTO_INCREMENT);
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
