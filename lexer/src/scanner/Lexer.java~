/* The following code was generated by JFlex 1.7.0 */

package scanner;

import com.jhonyrg.dev.parser.sym;
import java_cup.runtime.*;

import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3, 31, 31,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  0,  2,  0,  2,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  2,  0,  2,  0,  0, 
     0,  7, 10,  4,  9,  6, 14, 22, 25, 19,  1, 29, 13, 16, 20, 15, 
    17,  1,  5, 12,  8, 21, 27, 24, 23, 26,  1,  0,  0,  0,  0, 30, 
     0,  7, 10,  4,  9,  6, 14, 22, 25, 19,  1, 29, 13, 16, 20, 15, 
    17,  1,  5, 12,  8, 21, 27, 24, 23, 26,  1,  0,  2,  0,  0,  0, 
     0,  0,  0,  0,  0, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\7\2\1\1\5\2"+
    "\1\1\6\2\1\1\1\2\1\5\12\2\1\6\1\0"+
    "\6\2\1\6\1\0\3\2\1\0\5\2\1\0\4\2"+
    "\1\0\6\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\1\6\2\0\1\6\11\2\1\0\1\2\1\0\1\2"+
    "\1\6\1\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\0\10\2\1\0\1\2\2\0\1\2\1\0\2\2"+
    "\1\6\1\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\41\0\143\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\41\0\u035a\0\u037b\0\u039c\0\u03bd"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\102\0\u04a4"+
    "\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\41\0\u058b"+
    "\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693"+
    "\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b"+
    "\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3"+
    "\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab"+
    "\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3"+
    "\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb"+
    "\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3"+
    "\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb"+
    "\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3"+
    "\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb"+
    "\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3"+
    "\0\u1104\0\u0f36\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca"+
    "\0\u11eb\0\u120c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\3"+
    "\1\30\2\3\1\31\1\32\1\33\1\3\1\34\43\0"+
    "\1\3\2\0\7\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\5\0\1\5\36\0\1\3\2\0\1\3\1\35"+
    "\5\3\1\0\6\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\2\3\1\36\4\3\1\0\6\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\7\3\1\0"+
    "\6\3\1\0\1\3\1\37\2\3\1\40\4\3\1\0"+
    "\2\3\3\0\1\3\2\0\7\3\1\0\6\3\1\0"+
    "\2\3\1\41\6\3\1\0\2\3\3\0\1\3\2\0"+
    "\2\3\1\42\1\43\3\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\3\0\1\3\2\0\1\3\1\44\1\45"+
    "\1\46\3\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\6\3\1\0\7\3"+
    "\1\47\1\3\1\0\2\3\10\0\1\50\33\0\1\3"+
    "\2\0\2\3\1\51\4\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\3\0\1\3\2\0\1\3\1\52\5\3"+
    "\1\0\3\3\1\53\2\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\1\3\1\54\5\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\6\3\1\0\7\3\1\55\1\3\1\0\2\3"+
    "\3\0\1\3\2\0\1\3\1\56\5\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\20\0\1\57\5\0\1\60"+
    "\15\0\1\3\2\0\7\3\1\0\2\3\1\47\3\3"+
    "\1\0\1\3\1\61\7\3\1\0\2\3\3\0\1\3"+
    "\2\0\7\3\1\0\3\3\1\62\2\3\1\0\2\3"+
    "\1\63\6\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\64\1\65\4\3\1\66\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\1\3\1\67\5\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\6\3\1\0\6\3\1\70\2\3\1\0\2\3"+
    "\3\0\1\3\2\0\3\3\1\71\3\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\10\0\1\72\33\0\1\3"+
    "\2\0\2\3\1\14\4\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\3\0\1\3\2\0\2\3\1\73\4\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\7\3\1\0\2\3\1\74\3\3\1\0\11\3"+
    "\1\0\2\3\3\0\1\3\2\0\7\3\1\0\6\3"+
    "\1\0\2\3\1\75\1\76\5\3\1\0\2\3\3\0"+
    "\1\3\2\0\7\3\1\0\6\3\1\77\1\100\10\3"+
    "\1\0\2\3\3\0\1\3\2\0\4\3\1\101\2\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\7\3\1\0\6\3\1\0\4\3\1\62\4\3"+
    "\1\0\2\3\3\0\1\3\2\0\6\3\1\102\1\0"+
    "\6\3\1\0\11\3\1\0\2\3\3\0\1\3\2\0"+
    "\7\3\1\0\3\3\1\103\2\3\1\0\11\3\1\0"+
    "\2\3\3\0\1\3\2\0\7\3\1\0\1\3\1\104"+
    "\4\3\1\0\11\3\1\0\2\3\3\0\1\3\2\0"+
    "\4\3\1\105\2\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\12\0\1\57\4\0\1\106\24\0\1\3\2\0"+
    "\4\3\1\47\2\3\1\0\1\3\1\107\4\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\7\3\1\0"+
    "\3\3\1\75\2\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\1\3\1\110\5\3\1\0\6\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\5\3\1\111"+
    "\1\3\1\0\6\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\7\3\1\0\6\3\1\112\1\113\10\3"+
    "\1\0\2\3\3\0\1\3\2\0\7\3\1\0\6\3"+
    "\1\114\1\115\10\3\1\0\2\3\12\0\1\116\2\0"+
    "\2\117\7\0\1\120\15\0\1\3\2\0\4\3\1\121"+
    "\2\3\1\117\1\122\5\3\1\0\1\3\1\123\7\3"+
    "\1\0\2\3\3\0\1\3\2\0\4\3\1\47\2\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\7\3\1\0\1\3\1\124\4\3\1\0\11\3"+
    "\1\0\2\3\10\0\1\57\33\0\1\3\2\0\2\3"+
    "\1\47\4\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\5\3\1\73\1\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\3\3\1\125\2\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\2\3\1\126\4\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\1\3"+
    "\1\127\5\3\1\0\1\3\1\130\4\3\1\0\11\3"+
    "\1\0\2\3\34\0\1\57\7\0\1\3\2\0\3\3"+
    "\1\131\3\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\2\3\1\132\4\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\4\3\1\47\1\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\6\3\1\133\1\134"+
    "\10\3\1\0\2\3\15\0\2\135\25\0\1\3\2\0"+
    "\7\3\1\135\1\62\5\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\3\3\1\136\2\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\1\3\1\65\4\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\5\3\1\47\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\2\3\1\131"+
    "\4\3\1\0\6\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\2\3\1\137\1\140\3\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\10\0\1\141\33\0\1\3"+
    "\2\0\2\3\1\142\4\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\3\0\1\3\2\0\2\3\1\143\4\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\2\3\1\144\4\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\15\0\2\145\25\0\1\3\2\0\7\3"+
    "\1\145\1\146\5\3\1\0\11\3\1\0\2\3\22\0"+
    "\1\147\21\0\1\3\2\0\7\3\1\0\4\3\1\150"+
    "\1\3\1\0\11\3\1\0\2\3\21\0\1\57\27\0"+
    "\1\151\51\0\1\152\22\0\1\3\2\0\7\3\1\0"+
    "\3\3\1\47\2\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\2\3\1\153\4\3\1\0\6\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\7\3\1\0"+
    "\3\3\1\154\2\3\1\0\11\3\1\0\2\3\3\0"+
    "\1\3\2\0\7\3\1\0\1\3\1\47\4\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\7\3\1\0"+
    "\6\3\1\0\2\3\1\103\6\3\1\0\2\3\3\0"+
    "\1\3\2\0\1\3\1\65\5\3\1\0\6\3\1\0"+
    "\11\3\1\0\2\3\3\0\1\3\2\0\1\155\6\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\7\3\1\0\6\3\1\0\2\3\1\156\6\3"+
    "\1\0\2\3\3\0\1\3\2\0\4\3\1\65\2\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\3\0\1\3"+
    "\2\0\1\3\1\157\5\3\1\0\6\3\1\0\11\3"+
    "\1\0\2\3\26\0\1\64\15\0\1\3\2\0\7\3"+
    "\1\0\6\3\1\0\1\3\1\65\7\3\1\0\2\3"+
    "\12\0\1\57\31\0\1\3\2\0\7\3\1\0\6\3"+
    "\1\0\11\3\1\0\1\3\1\160\3\0\1\3\2\0"+
    "\4\3\1\161\2\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\3\0\1\3\2\0\6\3\1\162\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\6\0\1\135\35\0\1\3"+
    "\2\0\1\62\6\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\3\0\1\3\2\0\7\3\1\0\6\3\1\163"+
    "\1\164\10\3\1\0\2\3\3\0\1\3\2\0\1\3"+
    "\1\47\5\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\11\0\1\165\32\0\1\3\2\0\3\3\1\75\3\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\11\0\1\166"+
    "\32\0\1\3\2\0\3\3\1\167\3\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\7\0\1\135\44\0\1\170"+
    "\30\0\1\3\2\0\1\3\1\62\5\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\5\3"+
    "\1\171\1\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\6\3\1\0\6\3"+
    "\1\172\2\3\1\0\2\3\3\0\1\3\2\0\2\3"+
    "\1\173\4\3\1\0\6\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\2\3\1\174\4\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\3\0\1\3\2\0\7\3"+
    "\1\0\6\3\1\175\1\176\10\3\1\0\2\3\3\0"+
    "\1\3\2\0\7\3\1\0\6\3\1\177\1\200\10\3"+
    "\1\0\2\3\3\0\1\3\2\0\3\3\1\201\3\3"+
    "\1\0\6\3\1\0\11\3\1\0\2\3\30\0\1\202"+
    "\13\0\1\3\2\0\7\3\1\0\6\3\1\0\3\3"+
    "\1\203\5\3\1\0\2\3\22\0\1\57\25\0\1\72"+
    "\34\0\1\3\2\0\1\3\1\14\5\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\14\0\1\57\27\0\1\3"+
    "\2\0\6\3\1\47\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\3\0\1\3\2\0\3\3\1\144\3\3\1\0"+
    "\6\3\1\0\11\3\1\0\2\3\3\0\1\3\2\0"+
    "\7\3\1\57\1\47\5\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\0\6\3\1\0\1\3"+
    "\1\204\7\3\1\0\2\3\26\0\1\205\15\0\1\3"+
    "\2\0\7\3\1\0\6\3\1\0\1\3\1\206\7\3"+
    "\1\0\2\3\22\0\1\64\21\0\1\3\2\0\7\3"+
    "\1\0\4\3\1\65\1\3\1\0\11\3\1\0\2\3"+
    "\3\0\1\3\2\0\7\3\1\64\1\65\5\3\1\0"+
    "\11\3\1\0\2\3\26\0\1\57\15\0\1\3\2\0"+
    "\7\3\1\0\6\3\1\0\1\3\1\47\7\3\1\0"+
    "\2\3\3\0\1\3\2\0\1\207\6\3\1\0\6\3"+
    "\1\0\11\3\1\0\2\3\6\0\1\210\35\0\1\3"+
    "\2\0\1\211\6\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\3\0\1\3\2\0\2\3\1\212\4\3\1\0"+
    "\6\3\1\0\11\3\1\0\2\3\7\0\1\213\34\0"+
    "\1\3\2\0\1\3\1\214\5\3\1\0\6\3\1\0"+
    "\11\3\1\0\2\3\10\0\1\215\33\0\1\3\2\0"+
    "\2\3\1\216\4\3\1\0\6\3\1\0\11\3\1\0"+
    "\2\3\22\0\1\217\21\0\1\3\2\0\7\3\1\0"+
    "\4\3\1\220\1\3\1\0\11\3\1\0\2\3\10\0"+
    "\1\221\33\0\1\3\2\0\2\3\1\222\4\3\1\0"+
    "\6\3\1\0\11\3\1\0\2\3\26\0\1\135\15\0"+
    "\1\3\2\0\7\3\1\0\6\3\1\0\1\3\1\62"+
    "\7\3\1\0\2\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4653];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\27\1\1\11\13\1\1\0"+
    "\6\1\1\11\1\0\3\1\1\0\5\1\1\0\4\1"+
    "\1\0\6\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\12\1\1\0\1\1\1\0\3\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\10\1\1\0\1\1"+
    "\2\0\1\1\1\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*public String lexeme;

    public static void main(String args[]) throws Exception {
    		InputStream is = new FileInputStream(args[0]);
    		Lexer lexer = new Lexer(is);

    		Symbol token = null;
    		do {
    			token = lexer.next_token();
    			System.out.println(token == null ? "EOF" : token.toString());
    		} while (token != null);
    	}*/
    public Symbol token( int tokenType ) {
        System.err.println("Obtain token " + tokenType + " \"" + yytext() + "\"" );
        return new Symbol( tokenType, new TokenData(yyline+1, yycolumn+1, yycolumn+yylength(), yytext()));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.error);
            } 
            // fall through
          case 7: break;
          case 2: 
            { return token(sym.identifier);
            } 
            // fall through
          case 8: break;
          case 3: 
            { return token(sym.symbol);
            } 
            // fall through
          case 9: break;
          case 4: 
            { 
            } 
            // fall through
          case 10: break;
          case 5: 
            { throw new Error("Illegal character <"+yytext()+">");
            } 
            // fall through
          case 11: break;
          case 6: 
            { return token(sym.keyword);
            } 
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
