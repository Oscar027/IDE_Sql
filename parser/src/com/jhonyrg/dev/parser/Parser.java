
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jhonyrg.dev.parser;

import scanner.Lexer;
import scanner.LexerCallback;
import scanner.TokenData;
import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\003\004" +
    "\000\002\004\004\000\002\005\004\000\002\006\004\000" +
    "\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\004\004\005\001\002\000\004\006\022\001" +
    "\002\000\006\004\020\005\021\001\002\000\004\005\017" +
    "\001\002\000\006\002\016\004\005\001\002\000\006\002" +
    "\ufffd\004\ufffd\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\004\006\013\001\002\000\006\002\ufff9\004\ufff9\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\006\002\000" +
    "\004\000\001\002\000\004\002\001\001\002\000\004\006" +
    "\ufffb\001\002\000\004\005\ufffa\001\002\000\004\006\ufff8" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\016\002\006\003\010\004\003\005\005\006" +
    "\007\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\014\004\003\005\005\006" +
    "\013\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

        return lexer.next_token();
    
    }


    /*****Begin user code***************************************/
    private Logger log = Logger.getLogger(getClass().getName());
    private ParserCallback listener;
    private Lexer lexer;


    /**Constructores*/
    public Parser(File file ) {
        this();

        try {
            lexer = new Lexer(new FileReader(file));
            //lexer.setCallback();
        }
        catch ( IOException exception ) {
            throw new Error( "Unable to open file \"" + file + "\"" );
        }
    }

    public Parser(LexerCallback lexerCallback ) {
        this();

        try {
            lexer = new Lexer(new StringReader("create"));
            lexer.setCallback(lexerCallback);
        }
        catch ( Exception exception ) {
            log.log(Level.SEVERE, exception.getMessage());
        }
    }

    /**Metodo para setear callback al parser*/
    public void setParserCallback(ParserCallback listener){
        this.listener = listener;
    }

    /**Metodo para obtener el valor del Objeto retornado*/
    void toCallbackResult(Object result){
        log.log(Level.INFO,"To Callback result");
        TokenData tokenData;
        if(result instanceof java_cup.runtime.Symbol){
            //log.log(Level.INFO,"Result type symbol");
            tokenData  = ((TokenData) ((java_cup.runtime.Symbol) result).value);
            this.listener.onParserResult(tokenData);
        }else if(result instanceof TokenData){
            //log.log(Level.INFO,"Result type token");
            tokenData = (TokenData) result;
            this.listener.onParserResult(tokenData);

        }else{
            //log.log(Level.INFO,"Result type unknown");
            this.listener.onParserResult(null);
        }
    }

    /** Metodo para indicar al lexer que lea de nuevo, sin crear otra instancia .
     * El flujo de entrada anterior puede almacenarce con <code>yypushStream</code>
     * y puede recuperarse con <code>yypopStream</code>
     */
    public void continueRead(String in){
        this.lexer.yyreset(new StringReader(in));
    }

    /**Metodos para manejar errores recuperables*/
    public void report_error(String message, Object data){
        StringBuilder mBuilder = new StringBuilder("-*- Error");

        if(data instanceof java_cup.runtime.Symbol){
            TokenData tokenData  = ((TokenData) ((java_cup.runtime.Symbol) data).value);

            if(tokenData != null){
                if(tokenData.getLine() >= 0){
                    mBuilder.append(" in line " + tokenData.getLine());

                    if(tokenData.getFirstCol() >= 0){
                        mBuilder.append(", column " + tokenData.getFirstCol());
                    }
                }

                mBuilder.append(": " + message);
                System.err.println(mBuilder);
            }
        }
    }

    /**Metodos para manejar errores no recuperables*/
    public void report_fatal_error(String message, Object data){
        report_error(message, data);
        //Finalizar la ejecución
        //System.exit(1);
    }
    /*****End code user***************************************/
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


        Hashtable table = new Hashtable();      //Para análisis semantico
    
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr_sql EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr_sql ::= expr_sql expr_create_db_sql 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_sql",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_sql ::= expr_create_db_sql 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_sql",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_sql ::= expr_sql expr_use_db_sql 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_sql",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_sql ::= expr_use_db_sql 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_sql",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_create_db_sql ::= expr_create_db symbol 
            {
              Object RESULT =null;
		System.out.println("La BD ha sido creada.");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_create_db_sql",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_create_db ::= expr_create_db_keyword identifier 
            {
              Object RESULT =null;
		System.out.println("Creando BD...");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_create_db",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_create_db_keyword ::= keyword keyword 
            {
              Object RESULT =null;
		System.out.println("Inciando...");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_create_db_keyword",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_use_db_sql ::= expr_keyword_use_db symbol 
            {
              Object RESULT =null;
		System.out.println("Se ha seleccionado la BD.");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_use_db_sql",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_keyword_use_db ::= keyword identifier 
            {
              Object RESULT =null;
		int kwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int kwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object kw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            toCallbackResult(kw);
                            System.out.println("Identificando DB...");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_keyword_use_db",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
