package com.jhonyrg.dev.parser;

import scanner.Lexer;
import scanner.LexerCallback;
import scanner.TokenData;
import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

    action code{:
        Hashtable table = new Hashtable();      //Para análisis semantico
    :};

    parser code{:
    /*****Begin user code***************************************/
    private Logger log = Logger.getLogger(getClass().getName());
    private ParserCallback listener;
    private Lexer lexer;


    /**Constructores*/
    public Parser(File file ) {
        this();

        try {
            lexer = new Lexer(new FileReader(file));
            //lexer.setCallback();
        }
        catch ( IOException exception ) {
            throw new Error( "Unable to open file \"" + file + "\"" );
        }
    }

    public Parser(LexerCallback lexerCallback ) {
        this();

        try {
            lexer = new Lexer(new StringReader("create"));
            lexer.setCallback(lexerCallback);
        }
        catch ( Exception exception ) {
            log.log(Level.SEVERE, exception.getMessage());
        }
    }

    /**Metodo para setear callback al parser*/
    public void setParserCallback(ParserCallback listener){
        this.listener = listener;
    }

    /**Metodo para obtener el valor del Objeto retornado*/
    void toCallbackResult(Object result){
        log.log(Level.INFO,"To Callback result");
        TokenData tokenData;
        if(result instanceof java_cup.runtime.Symbol){
            //log.log(Level.INFO,"Result type symbol");
            tokenData  = ((TokenData) ((java_cup.runtime.Symbol) result).value);
            this.listener.onParserResult(tokenData);
        }else if(result instanceof TokenData){
            //log.log(Level.INFO,"Result type token");
            tokenData = (TokenData) result;
            this.listener.onParserResult(tokenData);

        }else{
            //log.log(Level.INFO,"Result type unknown");
            this.listener.onParserResult(null);
        }
    }

    /** Metodo para indicar al lexer que lea de nuevo, sin crear otra instancia .
     * El flujo de entrada anterior puede almacenarce con <code>yypushStream</code>
     * y puede recuperarse con <code>yypopStream</code>
     */
    public void continueRead(String in){
        this.lexer.yyreset(new StringReader(in));
    }

    /**Metodos para manejar errores recuperables*/
    public void report_error(String message, Object data){
        StringBuilder mBuilder = new StringBuilder("-*- Error");

        if(data instanceof java_cup.runtime.Symbol){
            TokenData tokenData  = ((TokenData) ((java_cup.runtime.Symbol) data).value);

            if(tokenData != null){
                if(tokenData.getLine() >= 0){
                    mBuilder.append(" in line " + tokenData.getLine());

                    if(tokenData.getFirstCol() >= 0){
                        mBuilder.append(", column " + tokenData.getFirstCol());
                    }
                }

                mBuilder.append(": " + message);
                System.err.println(mBuilder);
            }
        }
    }

    /**Metodos para manejar errores no recuperables*/
    public void report_fatal_error(String message, Object data){
        report_error(message, data);
        //Finalizar la ejecución
        //System.exit(1);
    }
    /*****End code user***************************************/
    :};

    scan with{:
        return lexer.next_token();
    :};

    /*Terminals (Tokens returned by scanner)*/
    //terminal symbol;
    terminal keyword, identifier, symbol;

    /*Non Terminals*/
    non terminal expr_sql;
    non terminal expr_create_db_sql, expr_create_db, expr_create_db_keyword;
    non terminal expr_use_db_sql, expr_keyword_use_db;

    /*Precedence and Associatively of Terminals*/

    /*Grammar rules*/
    start with expr_sql;
    expr_sql                ::= expr_sql expr_create_db_sql | expr_create_db_sql | expr_sql expr_use_db_sql | expr_use_db_sql;

    /*1- create database testDB;*/
    expr_create_db_sql      ::= expr_create_db symbol
                            {:System.out.println("La BD ha sido creada.");
                            :};
    expr_create_db          ::= expr_create_db_keyword identifier
                            {:System.out.println("Creando BD...");
                            :};
    expr_create_db_keyword  ::= keyword keyword
                            {:System.out.println("Inciando...");
                            :};

    /*2- use testDB;*/
    expr_use_db_sql         ::= expr_keyword_use_db symbol
                            {:System.out.println("Se ha seleccionado la BD.");
                            :};
    expr_keyword_use_db  ::= keyword:kw identifier
                            {:
                            toCallbackResult(kw);
                            System.out.println("Identificando DB...");
                            :};